<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:KControls="clr-namespace:KemoTools.Controls;assembly=KemoTools"
                    xmlns:Dialog="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:iconPacks="clr-namespace:MahApps.Metro.IconPacks;assembly=MahApps.Metro.IconPacks">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Themes/HamburgerMenuTemplate.xaml" />
        <ResourceDictionary Source="pack://application:,,,/LoadingIndicators.WPF;component/Colors.xaml" />
        <ResourceDictionary Source="pack://application:,,,/LoadingIndicators.WPF;component/Styles.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseDark.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ResourceDictionary x:Key="VSResources">
        <ResourceDictionary.MergedDictionaries>
            <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/VS/Colors.xaml" />
            <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/VS/Styles.xaml" />
        </ResourceDictionary.MergedDictionaries>
    </ResourceDictionary>
    <ResourceDictionary x:Key="CleanResources">
        <ResourceDictionary.MergedDictionaries>
            <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Clean/Clean.xaml" /> 
        </ResourceDictionary.MergedDictionaries>
    </ResourceDictionary>
    <!--#region Resources-->
    <System:Double x:Key="FloatingWatermarkFontSize">16</System:Double>

    <!--#endregion-->
    <!--#region Storyboard-->
    <System:Double x:Key="TValue">100</System:Double>
    <System:Double x:Key="NTValue">-100</System:Double>
    <Duration x:Key="TransistTime">00:00:0.600</Duration>
    <Duration x:Key="OpacityTime">00:00:0.600</Duration>
    <Storyboard x:Key="FadeToLeft">
        <DoubleAnimation  Storyboard.TargetProperty="Opacity"
                          From="0"
                          To="1"
                          Duration="{StaticResource ResourceKey=OpacityTime}" />
        <DoubleAnimation  Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                          To="0"
                          From="{StaticResource ResourceKey=TValue}"
                          Duration="{StaticResource ResourceKey=TransistTime}" />
    </Storyboard>
    <Storyboard x:Key="FadeToRight">
        <DoubleAnimation  Storyboard.TargetProperty="Opacity"
                          From="0"
                          To="1"
                          Duration="{StaticResource ResourceKey=OpacityTime}" />
        <DoubleAnimation  Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)"
                          To="0"
                          From="{StaticResource ResourceKey=NTValue}"
                          Duration="{StaticResource ResourceKey=TransistTime}" />
    </Storyboard>
    <Storyboard x:Key="FadeUp">
        <DoubleAnimation  Storyboard.TargetProperty="Opacity"
                          From="0"
                          To="1"
                          Duration="{StaticResource ResourceKey=OpacityTime}" />
        <DoubleAnimation  Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                          To="0"
                          From="{StaticResource ResourceKey=TValue}"
                          Duration="{StaticResource ResourceKey=TransistTime}" />
    </Storyboard>
    <Storyboard x:Key="FadeDown">
        <DoubleAnimation  Storyboard.TargetProperty="Opacity"
                          From="0"
                          To="1"
                          Duration="{StaticResource ResourceKey=OpacityTime}" />
        <DoubleAnimation  Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                          To="0"
                          From="{StaticResource ResourceKey=NTValue}"
                          Duration="{StaticResource ResourceKey=TransistTime}" />
    </Storyboard>
    <Storyboard x:Key="Fade">
        <DoubleAnimation  Storyboard.TargetProperty="Opacity"
                          From="0"
                          To="1"
                          FillBehavior="HoldEnd"
                          Duration="{StaticResource ResourceKey=OpacityTime}" />
    </Storyboard>
    <Storyboard x:Key="FadeOut">
        <DoubleAnimation  Storyboard.TargetProperty="Opacity"
                          FillBehavior="HoldEnd"
                          To="0"
                          Duration="{StaticResource ResourceKey=OpacityTime}" />
    </Storyboard>
    <Storyboard x:Key="FadeIn">
        <DoubleAnimation  Storyboard.TargetProperty="Opacity"
                          FillBehavior="HoldEnd"
                          To="1"
                          Duration="{StaticResource ResourceKey=OpacityTime}" />
    </Storyboard>
    <Storyboard x:Key="FadeZoomIn">
        <!--<DoubleAnimation  Storyboard.TargetProperty="Opacity"
                    From="0"
                    To="1"
                    Duration="{StaticResource ResourceKey=OpacityTime}" />-->
        <DoubleAnimation  Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                          To="1"
                          From="1.5"
                          Duration="{StaticResource ResourceKey=TransistTime}" />
        <DoubleAnimation  Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                          To="1"
                          From="1.5"
                          Duration="{StaticResource ResourceKey=TransistTime}" />
    </Storyboard>
    <Storyboard x:Key="FadeZoomOut">
        <!--<DoubleAnimation  Storyboard.TargetProperty="Opacity"
                    From="0"
                    To="1"
                          Duration="{StaticResource ResourceKey=OpacityTime}" />-->
        <DoubleAnimation  Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                          To="1.5"
                          From="1"
                          Duration="{StaticResource ResourceKey=TransistTime}" />
        <DoubleAnimation  Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                          To="1.5"
                          From="1"
                          Duration="{StaticResource ResourceKey=TransistTime}" />

    </Storyboard>
    <!--#endregion-->
    <!--#region Hamburger Menu -->

    <Style x:Key="HamburgerMenuCreatorsStyle"
           BasedOn="{StaticResource {x:Type Controls:HamburgerMenu}}"
           TargetType="{x:Type Controls:HamburgerMenu}">
        <Setter Property="PaneBackground"
                Value="{DynamicResource WhiteBrush}" />
        <Setter Property="PaneForeground"
                Value="{DynamicResource TextBrush}" />
        <Setter Property="ShowSelectionIndicator"
                Value="True" />

    </Style>

    <Style x:Key="HamburgerMenuCreatorsItemStyle"
           TargetType="{x:Type ListBoxItem}">

        <!--<Setter Property="Controls:ItemHelper.ActiveSelectionBackgroundBrush"
          Value="Transparent" />
  <Setter Property="Controls:ItemHelper.ActiveSelectionForegroundBrush"
          Value="{DynamicResource AccentBaseColorBrush}" />
  <Setter Property="Controls:ItemHelper.DisabledForegroundBrush"
          Value="{DynamicResource GrayNormalBrush}" />
  <Setter Property="Controls:ItemHelper.DisabledSelectedBackgroundBrush"
          Value="Transparent" />
  <Setter Property="Controls:ItemHelper.DisabledSelectedForegroundBrush"
          Value="{DynamicResource GrayNormalBrush}" />
  <Setter Property="Controls:ItemHelper.HoverBackgroundBrush"
          Value="{DynamicResource GrayBrush9}" />
  <Setter Property="Controls:ItemHelper.HoverSelectedBackgroundBrush"
          Value="{DynamicResource GrayBrush9}" />
  <Setter Property="Controls:ItemHelper.SelectedBackgroundBrush"
          Value="Transparent" />
  <Setter Property="Controls:ItemHelper.SelectedForegroundBrush"
          Value="{DynamicResource AccentBaseColorBrush}" />-->

        <Setter Property="Controls:ItemHelper.ActiveSelectionBackgroundBrush"
                Value="Transparent" />
        <Setter Property="Controls:ItemHelper.ActiveSelectionForegroundBrush"
                Value="{DynamicResource AccentBaseColorBrush}" />
        <Setter Property="Controls:ItemHelper.DisabledForegroundBrush"
                Value="{DynamicResource GrayNormalBrush}" />
        <Setter Property="Controls:ItemHelper.DisabledSelectedBackgroundBrush"
                Value="Transparent" />
        <Setter Property="Controls:ItemHelper.DisabledSelectedForegroundBrush"
                Value="{DynamicResource GrayNormalBrush}" />
        <Setter Property="Controls:ItemHelper.HoverBackgroundBrush"
                Value="{DynamicResource GrayBrush9}" />
        <Setter Property="Controls:ItemHelper.HoverSelectedBackgroundBrush"
                Value="{DynamicResource GrayBrush9}" />
        <Setter Property="Controls:ItemHelper.SelectedBackgroundBrush"
                Value="Transparent" />
        <Setter Property="Controls:ItemHelper.SelectedForegroundBrush"
                Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid Background="{TemplateBinding Background}"
                          RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Grid Margin="{TemplateBinding BorderThickness}">
                            <Grid HorizontalAlignment="Left"
                                  VerticalAlignment="Center"
                                  Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:HamburgerMenu}}, Path=ShowSelectionIndicator, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Rectangle x:Name="SelectionIndicator"
                                           Width="{DynamicResource HamburgerMenuSelectionIndicatorThemeWidth}"
                                           Height="{DynamicResource HamburgerMenuSelectionIndicatorThemeHeight}"
                                           Fill="{TemplateBinding Foreground}"
                                           Focusable="False"
                                           Opacity="0.0" />
                            </Grid>
                            <KControls:Ripple Padding="{TemplateBinding Padding}"
                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              Feedback="{DynamicResource GrayBrush1 }"
                                              Focusable="False"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"
                                 Value="True">
                            <Setter Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" />
                            <Setter TargetName="SelectionIndicator"
                                    Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="True" />
                                <Condition Property="Selector.IsSelectionActive"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="True" />
                                <Condition Property="IsSelected"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="True" />
                                <Condition Property="IsSelected"
                                           Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" />
                        </MultiTrigger>

                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled"
                                           Value="False" />
                                <Condition Property="IsSelected"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground"
                                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  This is the template for all menu items. In this sample we use the glyph items.  -->
    <DataTemplate DataType="{x:Type Controls:HamburgerMenuGlyphItem}">
        <DockPanel Height="48"
                   LastChildFill="True">
            <Grid x:Name="IconPart"
                  Width="48"
                  DockPanel.Dock="Left">
                <Image Margin="12"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Source="{Binding Glyph}"
                       Stretch="UniformToFill" />
            </Grid>
            <TextBlock x:Name="TextPart"
                       VerticalAlignment="Center"
                       FontSize="16"
                       Text="{Binding Label}" />
        </DockPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding PanePlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:HamburgerMenu}}}"
                         Value="Right">
                <Setter TargetName="IconPart"
                        Property="DockPanel.Dock"
                        Value="Right" />
                <Setter TargetName="TextPart"
                        Property="Margin"
                        Value="8 0 0 0" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  This is the template for all option menu items.  -->
    <DataTemplate DataType="{x:Type Controls:HamburgerMenuItem}">
        <DockPanel Height="48"
                   LastChildFill="True">
            <ContentControl x:Name="IconPart"
                            Width="48"
                            Content="{Binding Tag}"
                            DockPanel.Dock="Left"
                            Focusable="False"
                            IsTabStop="False" />
            <TextBlock x:Name="TextPart"
                       VerticalAlignment="Center"
                       FontSize="16"
                       Text="{Binding Label}" />
        </DockPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding PanePlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:HamburgerMenu}}}"
                         Value="Right">
                <Setter TargetName="IconPart"
                        Property="DockPanel.Dock"
                        Value="Right" />
                <Setter TargetName="TextPart"
                        Property="Margin"
                        Value="8 0 0 0" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <!--  This is the template for the menu items.  -->
    <DataTemplate x:Shared="False"
                  DataType="{x:Type Controls:HamburgerMenuIconItem}">
        <Grid Height="48">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="48" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <ContentControl Grid.Column="0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{Binding Icon}"
                            Focusable="False"
                            IsTabStop="False" />
            <TextBlock Grid.Column="1"
                       VerticalAlignment="Center"
                       FontSize="16"
                       Text="{Binding Label}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="HamburgerMenuCreatorsContentTemplate"
                  DataType="{x:Type Controls:HamburgerMenuIconItem}">

        <Grid   Margin="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <TextBlock  Grid.Row="0"
                        Padding="5,0,0,5"
                        Background="{DynamicResource AccentColorBrush}"
                        Foreground="{DynamicResource IdealForegroundColorBrush}"
                        FontFamily="{DynamicResource HeaderFontFamily}"
                        FontSize="{DynamicResource HeaderFontSize}"
                        Text="{Binding Label }"
                        VerticalAlignment="Center" />
            <ContentControl Grid.Row="1"
                            Content="{Binding Tag,  Mode=OneWay,TargetNullValue='Content Here', NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"
                            Focusable="False" />
        </Grid>

    </DataTemplate>

    <!--#endregion-->
    <!--#region Buttons -->
    <Style x:Key="CircleButtonStyle"
           BasedOn="{StaticResource MahApps.Metro.Styles.MetroCircleButtonStyle}"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground"
                Value="{DynamicResource AccentColorBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource GrayBrush7}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CircleToggleButtonStyle"
           BasedOn="{StaticResource MahApps.Metro.Styles.MetroCircleToggleButtonStyle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground"
                Value="{DynamicResource AccentColorBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource GrayBrush7}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CircleDropDownButtonStyle"
           BasedOn="{StaticResource {x:Type Controls:DropDownButton}}"
           TargetType="Controls:DropDownButton">
        <Setter Property="ArrowVisibility"
                Value="Collapsed" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="ButtonStyle"
                Value="{DynamicResource MahApps.Metro.Styles.MetroCircleButtonStyle}" />
        <Setter Property="FocusVisualStyle"
                Value="{DynamicResource MahApps.Metro.Styles.MetroCircleFocusVisual}" />
        <Setter Property="Height"
                Value="48" />
        <Setter Property="Width"
                Value="48" />
    </Style>
    <Style x:Key="SquareButton"
           TargetType="Button"
           BasedOn="{StaticResource SquareButtonStyle}" />
    <Style x:Key="MetroCircleButtonStyle"
           TargetType="Button"
           BasedOn="{StaticResource MahApps.Metro.Styles.MetroCircleButtonStyle}" />
    <Style x:Key="LinkButton"
           TargetType="Button" BasedOn="{StaticResource ResourceKey=SquareButton}">
        <Setter Property="Foreground"
                Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />

        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="BorderThickness"
                Value="0" />
       
    </Style>
    <Style x:Key="Win10ToggleSwitchStyle"
           TargetType="Controls:ToggleSwitch"
           BasedOn="{StaticResource MahApps.Metro.Styles.ToggleSwitch.Win10}" />
    <Style x:Key="AccentedSquareButtonStyle"
           TargetType="Button"
           BasedOn="{StaticResource SquareButtonStyle}">
        <Setter Property="Foreground"
                Value="{DynamicResource IdealForegroundColorBrush}" />
        <Setter Property="Background"
                Value="{DynamicResource AccentColorBrush}" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Foreground"
                        Value="{DynamicResource TextBrush}" />

                <Setter Property="BorderBrush"
                        Value="{DynamicResource TextBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource GrayBrush7}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MetroFlatToggleButtonStyle"
           TargetType="ToggleButton"
           BasedOn="{StaticResource MetroFlatToggleButton}" />
    <Style x:Key="MetroFlatButtonStyle"
           TargetType="Button"
           BasedOn="{StaticResource MetroFlatButton}" />
    <Style x:Key="AccentedFlatButtonStyle"
           TargetType="Button"
           BasedOn="{StaticResource MetroFlatButtonStyle}">
        <Setter Property="Foreground"
                Value="{DynamicResource IdealForegroundColorBrush}" />
        <Setter Property="Background"
                Value="{DynamicResource AccentColorBrush}" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Foreground"
                        Value="{DynamicResource TextBrush}" />

                <Setter Property="BorderBrush"
                        Value="{DynamicResource TextBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Background"
                        Value="{DynamicResource AccentColorBrush3}" />

            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="AccentCircleButtonStyle"
           BasedOn="{StaticResource MahApps.Metro.Styles.MetroCircleButtonStyle}"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Background"
                Value="{DynamicResource AccentColorBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource GrayBrush7}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="InvertMetroFlatToggleButton"
           BasedOn="{StaticResource MetroFlatToggleButton}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground"
                Value="{DynamicResource AccentColorBrush}" />
        <Style.Triggers>
            <Trigger Property="IsChecked"
                     Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource GrayBrush7 }" />
                <Setter Property="Foreground"
                        Value="{DynamicResource  TextBrush}" />

            </Trigger>
            <Trigger Property="IsChecked"
                     Value="False">
                <Setter Property="Background"
                        Value="{DynamicResource  AccentColorBrush}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource  IdealForegroundColorBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region Slider-->
    <Style x:Key="Win10SliderStyle"
           TargetType="Slider"
           BasedOn="{StaticResource MahApps.Metro.Styles.Slider.Win10}" />
    <Style x:Key="Win10RangeSliderStyle"
           TargetType="Slider"
           BasedOn="{StaticResource MahApps.Metro.Styles.RangeSlider.Win10}" />
    <Style x:Key="FlatSliderStyle"
           TargetType="Slider"
           BasedOn="{StaticResource MahApps.Metro.Styles.FlatSlider}" />
    <System:Double x:Key="HorizontalThumbHeight">16</System:Double>
    <System:Double x:Key="HorizontalThumbWidth">16</System:Double>
    <System:Double x:Key="VerticalThumbWidth">16</System:Double>
    <System:Double x:Key="VerticalThumbHeight">16</System:Double>

    <Style x:Key="KemoThumb"
           TargetType="Thumb">
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="IsTabStop"
                Value="False" />
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Ellipse Fill="Transparent"
                             Stroke="{DynamicResource  AccentColorBrush}"
                             StrokeThickness="2"
                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="KemoHorizontalTrack"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="IsTabStop"
                Value="False" />
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <Rectangle Height="3"
                                   Fill="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="KemoHorizontalTrackValue"
           BasedOn="{StaticResource KemoHorizontalTrack}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <Rectangle Height="5"
                                   Fill="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="KemoVerticalTrack"
           BasedOn="{StaticResource KemoHorizontalTrack}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <Rectangle Width="3"
                                   Fill="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="KemoVerticalTrackValue"
           BasedOn="{StaticResource KemoVerticalTrack}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <Rectangle Width="5"
                                   Fill="{TemplateBinding Foreground}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  HorizontalSlider  -->
    <ControlTemplate x:Key="KemoHorizontalTemplate"
                     TargetType="{x:Type Slider}">
        <Grid x:Name="HorizontalTemplate"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              Background="{TemplateBinding Background}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*"
                               MinHeight="{TemplateBinding Slider.MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TickBar x:Name="TopTick"
                     Grid.Row="0"
                     Height="4"
                     Fill="{TemplateBinding Foreground}"
                     Placement="Top"
                     Visibility="Collapsed" />
            <TickBar x:Name="BottomTick"
                     Grid.Row="2"
                     Height="4"
                     Fill="{TemplateBinding Foreground}"
                     Placement="Bottom"
                     Visibility="Collapsed" />
            <Track x:Name="PART_Track"
                   Grid.Row="1">
                <Track.DecreaseRepeatButton>
                    <RepeatButton x:Name="HorizontalTrackDecrease"
                                  Command="{x:Static Slider.DecreaseLarge}"
                                  Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillBrush)}"
                                  Style="{DynamicResource KemoHorizontalTrackValue}" />
                </Track.DecreaseRepeatButton>
                <Track.IncreaseRepeatButton>
                    <RepeatButton x:Name="HorizontalTrackIncrease"
                                  Command="{x:Static Slider.IncreaseLarge}"
                                  Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillBrush)}"
                                  Style="{DynamicResource KemoHorizontalTrack}" />
                </Track.IncreaseRepeatButton>
                <Track.Thumb>
                    <Controls:MetroThumb x:Name="HorizontalThumb"
                                         Width="{DynamicResource HorizontalThumbWidth}"
                                         Height="{DynamicResource HorizontalThumbHeight}"
                                         Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillBrush)}"
                                         BorderThickness="1 0"
                                         IsTabStop="True"
                                         Style="{DynamicResource KemoThumb}" />
                </Track.Thumb>
            </Track>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement"
                     Value="TopLeft">
                <Setter TargetName="TopTick"
                        Property="Visibility"
                        Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement"
                     Value="BottomRight">
                <Setter TargetName="BottomTick"
                        Property="Visibility"
                        Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement"
                     Value="Both">
                <Setter TargetName="BottomTick"
                        Property="Visibility"
                        Value="Visible" />
                <Setter TargetName="TopTick"
                        Property="Visibility"
                        Value="Visible" />
            </Trigger>

            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter TargetName="HorizontalThumb"
                        Property="Background"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillHoverBrush)}" />
                <Setter TargetName="HorizontalTrackDecrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillHoverBrush)}" />
                <Setter TargetName="HorizontalTrackIncrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillHoverBrush)}" />
            </Trigger>
            <Trigger SourceName="HorizontalTrackDecrease"
                     Property="IsPressed"
                     Value="True">
                <Setter TargetName="HorizontalThumb"
                        Property="Background"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="HorizontalTrackDecrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="HorizontalTrackIncrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillPressedBrush)}" />
            </Trigger>
            <Trigger SourceName="HorizontalTrackIncrease"
                     Property="IsPressed"
                     Value="True">
                <Setter TargetName="HorizontalThumb"
                        Property="Background"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="HorizontalTrackDecrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="HorizontalTrackIncrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillPressedBrush)}" />
            </Trigger>
            <Trigger SourceName="HorizontalThumb"
                     Property="IsDragging"
                     Value="True">
                <Setter TargetName="HorizontalThumb"
                        Property="Background"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="HorizontalTrackDecrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="HorizontalTrackIncrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillPressedBrush)}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter TargetName="HorizontalThumb"
                        Property="Background"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillDisabledBrush)}" />
                <Setter TargetName="HorizontalTrackDecrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillDisabledBrush)}" />
                <Setter TargetName="HorizontalTrackIncrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillDisabledBrush)}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  VerticalSlider  -->
    <ControlTemplate x:Key="KemoVerticalTemplate"
                     TargetType="{x:Type Slider}">
        <Grid x:Name="HorizontalTemplate"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*"
                                  MinWidth="{TemplateBinding Slider.MinWidth}" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TickBar x:Name="TopTick"
                     Grid.Column="0"
                     Width="4"
                     Fill="{TemplateBinding Foreground}"
                     Placement="Left"
                     Visibility="Collapsed" />
            <TickBar x:Name="BottomTick"
                     Grid.Column="2"
                     Width="4"
                     Fill="{TemplateBinding Foreground}"
                     Placement="Right"
                     Visibility="Collapsed" />
            <Track x:Name="PART_Track"
                   Grid.Column="1">
                <Track.DecreaseRepeatButton>
                    <RepeatButton x:Name="VerticalTrackDecrease"
                                  Command="{x:Static Slider.DecreaseLarge}"
                                  Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillBrush)}"
                                  Style="{DynamicResource KemoVerticalTrackValue}" />
                </Track.DecreaseRepeatButton>
                <Track.IncreaseRepeatButton>
                    <RepeatButton x:Name="VerticalTrackIncrease"
                                  Command="{x:Static Slider.IncreaseLarge}"
                                  Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillBrush)}"
                                  Style="{DynamicResource KemoVerticalTrack}" />
                </Track.IncreaseRepeatButton>
                <Track.Thumb>
                    <Controls:MetroThumb x:Name="VerticalThumb"
                                         Width="{DynamicResource VerticalThumbWidth}"
                                         Height="{DynamicResource VerticalThumbHeight}"
                                         Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillBrush)}"
                                         BorderThickness="0 1"
                                         IsTabStop="True"
                                         Style="{DynamicResource KemoThumb}" />
                </Track.Thumb>
            </Track>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement"
                     Value="TopLeft">
                <Setter TargetName="TopTick"
                        Property="Visibility"
                        Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement"
                     Value="BottomRight">
                <Setter TargetName="BottomTick"
                        Property="Visibility"
                        Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement"
                     Value="Both">
                <Setter TargetName="BottomTick"
                        Property="Visibility"
                        Value="Visible" />
                <Setter TargetName="TopTick"
                        Property="Visibility"
                        Value="Visible" />
            </Trigger>

            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter TargetName="VerticalThumb"
                        Property="Background"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillHoverBrush)}" />
                <Setter TargetName="VerticalTrackDecrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillHoverBrush)}" />
                <Setter TargetName="VerticalTrackIncrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillHoverBrush)}" />
            </Trigger>
            <Trigger SourceName="VerticalTrackDecrease"
                     Property="IsPressed"
                     Value="True">
                <Setter TargetName="VerticalThumb"
                        Property="Background"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="VerticalTrackDecrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="VerticalTrackIncrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillPressedBrush)}" />
            </Trigger>
            <Trigger SourceName="VerticalTrackIncrease"
                     Property="IsPressed"
                     Value="True">
                <Setter TargetName="VerticalThumb"
                        Property="Background"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="VerticalTrackDecrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="VerticalTrackIncrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillPressedBrush)}" />
            </Trigger>
            <Trigger SourceName="VerticalThumb"
                     Property="IsDragging"
                     Value="True">
                <Setter TargetName="VerticalThumb"
                        Property="Background"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillPressedBrush)}" />
                <Setter TargetName="VerticalTrackDecrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillPressedBrush)}" />
                <Setter TargetName="VerticalTrackIncrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillPressedBrush)}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter TargetName="VerticalThumb"
                        Property="Background"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.ThumbFillDisabledBrush)}" />
                <Setter TargetName="VerticalTrackDecrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackValueFillDisabledBrush)}" />
                <Setter TargetName="VerticalTrackIncrease"
                        Property="Foreground"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:SliderHelper.TrackFillDisabledBrush)}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="KemoSliderStyle"
           TargetType="{x:Type Slider}">
        <Setter Property="BorderBrush"
                Value="{DynamicResource ControlBorderBrush}" />
        <Setter Property="BorderThickness"
                Value="2" />
        <Setter Property="Controls:SliderHelper.ThumbFillBrush"
                Value="{DynamicResource GrayBrush2}" />
        <Setter Property="Controls:SliderHelper.ThumbFillDisabledBrush"
                Value="{DynamicResource GrayBrush6}" />
        <Setter Property="Controls:SliderHelper.ThumbFillHoverBrush"
                Value="{DynamicResource GrayBrush5}" />
        <Setter Property="Controls:SliderHelper.ThumbFillPressedBrush"
                Value="{DynamicResource GrayBrush2}" />
        <Setter Property="Controls:SliderHelper.TrackFillBrush"
                Value="{DynamicResource GrayBrush3}" />
        <Setter Property="Controls:SliderHelper.TrackFillDisabledBrush"
                Value="{DynamicResource GrayBrush6}" />
        <Setter Property="Controls:SliderHelper.TrackFillHoverBrush"
                Value="{DynamicResource GrayBrush3}" />
        <Setter Property="Controls:SliderHelper.TrackFillPressedBrush"
                Value="{DynamicResource GrayBrush3}" />
        <Setter Property="Controls:SliderHelper.TrackValueFillBrush"
                Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Controls:SliderHelper.TrackValueFillDisabledBrush"
                Value="{DynamicResource GrayBrush6}" />
        <Setter Property="Controls:SliderHelper.TrackValueFillHoverBrush"
                Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Controls:SliderHelper.TrackValueFillPressedBrush"
                Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource GrayBrush1}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Maximum"
                Value="100" />
        <Setter Property="Minimum"
                Value="0" />
        <Setter Property="Template"
                Value="{DynamicResource KemoHorizontalTemplate}" />
        <Setter Property="Value"
                Value="0" />
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="Orientation"
                     Value="Vertical">
                <Setter Property="Template"
                        Value="{DynamicResource KemoVerticalTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->
    <!--#region TextBox -->
    <Style x:Key="MetroTextBoxStyle"
           TargetType="TextBox"
           BasedOn="{StaticResource MetroTextBox}" />
    <Style  x:Key="SearchMetroTextBoxStyle"
            TargetType="TextBox"
            BasedOn="{StaticResource SearchMetroTextBox}" />
    <!--#endregion-->
    <!--#region PasswordBox -->
    <Style x:Key="MetroPasswordBox"
           TargetType="PasswordBox"
           BasedOn="{StaticResource Win8MetroPasswordBox}" />
   
    <!--#endregion-->
    <!--#region Tile -->
    <Style x:Key="LargeTileStyle"
           TargetType="Controls:Tile">
        <Setter Property="Height"
                Value="125" />
        <Setter Property="TextOptions.TextFormattingMode"
                Value="Display" />
        <Setter Property="TextOptions.TextRenderingMode"
                Value="ClearType" />
        <Setter Property="TitleFontSize"
                Value="14" />
        <Setter Property="Width"
                Value="300" />
    </Style>
    <Style x:Key="ActiveTileStyle"
           TargetType="Controls:Tile">
        <Setter Property="Controls:ControlsHelper.MouseOverBorderBrush"
                Value="{DynamicResource BlackBrush}" />
        <Setter Property="Controls:ControlsHelper.FocusBorderBrush"
                Value="{DynamicResource BlackBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource GrayBrush9}" />
        <Setter Property="BorderThickness"
                Value="2" />
        <Setter Property="Background"
                Value="{DynamicResource WhiteBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource TextBrush}" />
    </Style>
    <Style x:Key="SmallTileStyle"
           TargetType="Controls:Tile">
        <Setter Property="Height"
                Value="125" />
        <Setter Property="TextOptions.TextFormattingMode"
                Value="Ideal" />
        <Setter Property="TextOptions.TextRenderingMode"
                Value="ClearType" />
        <Setter Property="TitleFontSize"
                Value="10" />
        <Setter Property="Width"
                Value="147" />
    </Style>
    <!--#endregion-->
    <!--#region List -->
    <Style x:Key="VirtualisedMetroListView"
           TargetType="ListView"
           BasedOn="{StaticResource VirtualisedMetroListView}" />
    <Style x:Key="VirtualisedMetroTreeView"
           TargetType="TreeView"
           BasedOn="{StaticResource VirtualisedMetroTreeView}" />
    <Style x:Key="VirtualisedMetroListBoxStyle"
           TargetType="ListBox"
           BasedOn="{StaticResource VirtualisedMetroListBox}" />
    <Style x:Key="MetroDataGrid"
           TargetType="DataGrid"
           BasedOn="{StaticResource MetroDataGrid}" />


    <Style x:Key="AzureDataGridStyle"
           TargetType="DataGrid"
           BasedOn="{StaticResource AzureDataGrid}" />
    <!--#endregion-->
    <!--#region ComboBox -->
    <Style x:Key="VirtualisedMetroComboBox"
           TargetType="ComboBox"
           BasedOn="{StaticResource VirtualisedMetroComboBox}" />

    <!--#endregion-->
    <!--#region Window -->
    <Style x:Key="CleanWindowStyleKey"
           TargetType="Controls:MetroWindow"
           BasedOn="{StaticResource CleanWindowStyleKey}" />
    <Style x:Key="VSWindowStyleKey"
           TargetType="Controls:MetroWindow"
           BasedOn="{StaticResource VSWindowStyleKey}" />

    <!--#endregion-->
    <!--#region ContextMenu-->
    <Style TargetType="ContextMenu"
           x:Key="SlideDownMenu"
           BasedOn="{StaticResource {x:Type ContextMenu}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border BorderBrush="{TemplateBinding BorderBrush }"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Margin="{TemplateBinding Margin}"
                            Padding="{TemplateBinding Padding}"
                            UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            RenderOptions.ClearTypeHint="Auto"
                            Background="{TemplateBinding Background}">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="RenderTransform">
                                    <Setter.Value>
                                        <TranslateTransform />
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu,Mode=FindAncestor},Path=IsOpen}"
                                                 Value="True">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation  Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                                                                      To="0"
                                                                      From="{StaticResource ResourceKey=NTValue}"
                                                                      Duration="{StaticResource ResourceKey=TransistTime}" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>

                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <!--#endregion-->
    <!--#region expander -->
    <Style TargetType="{x:Type Expander}"
           BasedOn="{StaticResource {x:Type Expander}}"
           x:Key="VSExpander">
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Margin"
                Value="0,5" />
        <Setter Property="Padding"
                Value="2" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton IsChecked="{TemplateBinding Property=IsExpanded}"
                                      x:Name="ContentCont"
                                      HorizontalContentAlignment="Stretch"
                                      VerticalContentAlignment="Stretch"
                                      Style="{StaticResource MetroFlatToggleButton}"
                                      Padding="{TemplateBinding Padding}"
                                      FontSize="{TemplateBinding FontSize}"
                                      FontWeight="{TemplateBinding FontWeight}"
                                      Foreground="{TemplateBinding Foreground}"
                                      Background="{TemplateBinding Background }"
                                      BorderBrush="{x:Null}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <iconPacks:PackIconMaterial  Margin="0,0,0,0"
                                                             Width="20"
                                                             Height="20"
                                                             VerticalAlignment="Center"
                                                             VerticalContentAlignment="Center">
                                    <iconPacks:PackIconMaterial.Style>
                                        <Style TargetType="iconPacks:PackIconMaterial">
                                            <Setter Property="Kind"
                                                    Value="MenuDownOutline" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton,Mode=FindAncestor},Path=IsChecked}"
                                                             Value="True">
                                                    <Setter Property="Kind"
                                                            Value="MenuUpOutline" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </iconPacks:PackIconMaterial.Style>
                                </iconPacks:PackIconMaterial>
                                <ContentControl Grid.Column="1"
                                                Focusable="False"
                                                Padding="{TemplateBinding Padding}"
                                                Margin="5,0,0,0"
                                                Content="{TemplateBinding Header }"
                                                VerticalAlignment="Center" />
                                <Separator Background="{TemplateBinding  BorderBrush}"
                                           Grid.ColumnSpan="2"
                                           Margin="0,2,0,0"
                                           Grid.Row="1" />
                            </Grid>
                        </ToggleButton>

                        <ContentPresenter Focusable="False"
                                          Content="{TemplateBinding Content}"
                                          Grid.Row="1">
                            <ContentPresenter.Style>
                                <Style TargetType="ContentPresenter">
                                    <Style.Triggers>
                                        <!--<Trigger Property="Opacity"
                     Value="0">
             <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>-->
                                        <DataTrigger Binding="{Binding ElementName=ContentCont,Path=IsChecked}"
                                                     Value="False">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard  Storyboard="{StaticResource  FadeOut}" />
                                            </DataTrigger.EnterActions>
                                            <Setter Property="Visibility"
                                                    Value="Collapsed" />

                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=ContentCont,Path=IsChecked}"
                                                     Value="True">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard  Storyboard="{StaticResource Fade}" />
                                            </DataTrigger.EnterActions>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>

                            </ContentPresenter.Style>
                            <ContentPresenter.RenderTransform>
                                <TranslateTransform />
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused"
                     Value="True">
                <Setter Property="IsExpanded"
                        Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->
    <!--#region check -->
    <Style x:Key="MetroCheckBox"
           TargetType="{x:Type CheckBox}">
        <Setter Property="BorderBrush"
                Value="{DynamicResource TextBrush}" />
        <Setter Property="Padding"
                Value="2" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Border  Background="{TemplateBinding Background  }"
                             BorderThickness="{TemplateBinding BorderThickness}"
                             Padding="{TemplateBinding Padding}"
                             BorderBrush="{TemplateBinding BorderBrush  }">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <iconPacks:PackIconMaterial Foreground="{TemplateBinding BorderBrush }"
                                                        Margin="3"
                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                        Width="20"
                                                        Height="20">
                                <iconPacks:PackIconMaterial.Style>
                                    <Style TargetType="iconPacks:PackIconMaterial">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=IsChecked}"
                                                         Value="False">
                                                <Setter Property="Kind"
                                                        Value="CheckboxBlankOutline" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=IsChecked}"
                                                         Value="True">
                                                <Setter Property="Kind"
                                                        Value="CheckboxMarkedOutline" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=IsChecked}"
                                                         Value="{x:Null}">
                                                <Setter Property="Kind"
                                                        Value="CheckboxIntermediate" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </iconPacks:PackIconMaterial.Style>
                            </iconPacks:PackIconMaterial>
                            <ContentPresenter Grid.Column="1" />
                        </Grid>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region  ListBoxItem-->
    <Style x:Key="SelectionBorderListBoxItem"
           TargetType="ListBoxItem"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="BorderBrush"
                Value="{DynamicResource GrayBrush9}" />
        <Setter Property="Background"
                Value="{DynamicResource GrayBrush10}" />
        <Setter Property="mah:ControlsHelper.MouseOverBorderBrush"
                Value="{DynamicResource BlackBrush}" />
        <Setter Property="BorderThickness"
                Value="2" />
        <Setter Property="Margin"
                Value="1,1,1,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            HorizontalAlignment="{TemplateBinding  HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding  VerticalAlignment}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Width="Auto"
                            Margin="{TemplateBinding Margin}"
                            Height="Auto">
                        <ContentPresenter     VerticalAlignment="{TemplateBinding  VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding  HorizontalContentAlignment}" />
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="IsSelected"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource BlackBrush}" />

                <Setter Property="Background"
                        Value="{DynamicResource GrayBrush8}" />

            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="PlainListBoxItem"
           TargetType="{x:Type ListBoxItem}"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ListBoxItem}">
                    <Border  Background="{TemplateBinding Background}"
                             BorderBrush="{TemplateBinding BorderBrush}"
                             Margin="{TemplateBinding Margin}"
                             BorderThickness="1"
                             Padding="1">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin"
                Value="1" />
        <Style.Triggers>
            <Trigger Property="IsSelected"
                     Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource AccentColorBrush}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource IdealForegroundColorBrush}" />
                <Setter Property="BorderBrush"
                        Value="{DynamicResource TextBrush}" />
            </Trigger>
            <Trigger Property="IsSelected"
                     Value="False">

                <Setter Property="BorderBrush"
                        Value="DarkGray" />
                <Setter Property="Background"
                        Value="{DynamicResource ControlBackgroundBrush}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="CleanRoundListBoxItem"
           TargetType="{x:Type ListBoxItem}"
           BasedOn="{StaticResource  ResourceKey=PlainListBoxItem}">
        <Setter Property="Margin"
                Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ListBoxItem}">
                    <Border BorderThickness="{TemplateBinding BorderThickness }"
                            Background="{TemplateBinding Background}"
                            Margin="{TemplateBinding Margin}"
                            BorderBrush="{TemplateBinding BorderBrush}">

                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background"
                Value="{DynamicResource ControlBackgroundBrush}" />

        <Setter Property="BorderThickness"
                Value="2" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource TextBrush}" />
    </Style>
    <Style x:Key="BWPlainListBoxItem"
           TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ListBoxItem}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Margin="2"
                            BorderThickness="1"
                            Padding="1">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin"
                Value="2" />
        <Style.Triggers>
            <Trigger Property="IsSelected"
                     Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource TextBrush}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource ControlBackgroundBrush}" />
                <Setter Property="BorderBrush"
                        Value="{DynamicResource  AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsSelected"
                     Value="False">

                <Setter Property="BorderBrush"
                        Value="DarkGray" />
                <Setter Property="Background"
                        Value="{DynamicResource ControlBackgroundBrush}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource  TextBrush}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="InvertListBoxItem"
           TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ListBoxItem}">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            Padding="1">
                        <Border.Resources>
                            <Style TargetType="{x:Type Border}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}}"
                                                 Value="True">

                                        <Setter Property="BorderBrush"
                                                Value="{DynamicResource TextBrush}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}}"
                                                 Value="False">

                                        <Setter Property="BorderBrush"
                                                Value="{DynamicResource ControlBackgroundBrush}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Resources>
                        <ContentPresenter   ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform />
            </Setter.Value>
        </Setter>
        <Setter Property="Margin"
                Value="2" />
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <BeginStoryboard Storyboard="{StaticResource FadeUp}" />
            </EventTrigger>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}"
                         Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource ControlBackgroundBrush}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource AccentColorBrush}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}"
                         Value="False">
                <Setter Property="Background"
                        Value="{DynamicResource AccentColorBrush}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource TextBrush}" />
            </DataTrigger>

        </Style.Triggers>
    </Style>

    <!--#endregion-->
    <!--#region Dialog-->
    <Style TargetType="{x:Type Dialog:BaseMetroDialog}"
           x:Key="FullDialogStyle"
           BasedOn="{StaticResource {x:Type Dialog:BaseMetroDialog}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Dialog:BaseMetroDialog}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="DialogShownStoryboard">
                            <DoubleAnimation AccelerationRatio=".9"
                                             BeginTime="0:0:0"
                                             Duration="0:0:0.2"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                FocusVisualStyle="{x:Null}"
                                Focusable="False">

                            <ContentPresenter />


                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Loaded">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource DialogShownStoryboard}" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Dialog:BaseMetroDialog}"
           x:Key="DialogStyle"
           BasedOn="{StaticResource {x:Type Dialog:BaseMetroDialog}}">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Dialog:BaseMetroDialog}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="DialogShownStoryboard">
                            <DoubleAnimation AccelerationRatio=".9"
                                             BeginTime="0:0:0"
                                             Duration="0:0:0.2"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Border FocusVisualStyle="{x:Null}"
                                Focusable="False">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ContentPresenter Grid.Row="0"
                                                  Content="{TemplateBinding DialogTop}" />
                                <Grid Grid.Row="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="10*" />
                                        <ColumnDefinition Width="80*" />
                                        <ColumnDefinition Width="10*" />
                                    </Grid.ColumnDefinitions>
                                    <!--  Content area  -->
                                    <Grid Grid.Column="1"
                                          Margin="0 10 0 0">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <TextBlock Grid.Row="0"
                                                   FontSize="{DynamicResource DialogTitleFontSize}"
                                                   Foreground="{TemplateBinding Foreground}"
                                                   Text="{TemplateBinding Title}"
                                                   TextWrapping="Wrap" />
                                        <ContentPresenter Grid.Row="1"
                                                          Content="{TemplateBinding Content}" />
                                    </Grid>
                                </Grid>
                                <ContentPresenter Grid.Row="2"
                                                  Content="{TemplateBinding DialogBottom}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Loaded">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource DialogShownStoryboard}" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
</ResourceDictionary>